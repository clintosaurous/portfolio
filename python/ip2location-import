#!/opt/clintosaurous/venv/bin/python3 -Bu

"""
Updates the IP2LOCATION local database.
"""


import clintosaurous.credentials as credentials
from clintosaurous.datetime import run_time
import clintosaurous.db
import clintosaurous.log as log
import clintosaurous.opts
import csv
import os
import requests
import time
from zipfile import ZipFile


VERSION = '1.2.0'
LAST_UPDATE = '2022-12-09'


def cli_opts() -> clintosaurous.opts.argparse.Namespace:

    clintosaurous.opts.parser.description = \
        'Updates the IP2LOCATION local database.'

    clintosaurous.opts.parser.add_argument(
        '-t', '--tmp_dir',
        type=str,
        default='/tmp',
        help='Directory to use for downloaded data.'
    )

    clintosaurous.opts.parser.add_argument(
        '-N', '--no_del',
        action='store_true',
        help='Do not delete downloaded and extracted files.'
    )

    return clintosaurous.opts.cli()

# End cli_opts()


def download_file(url: str, file_name: str):

    out_file = os.path.join(opts.tmp_dir, file_name)

    log.log(f'Downloading {url} to {out_file}')

    if (
        os.path.exists(out_file)
        and (time.time() - os.stat(out_file).st_mtime) / 3600 < 12
    ):
        log.log(f'{out_file} is less than 12 hours old, skipping download.')
        return

    response = requests.get(url)
    response.raise_for_status()

    with open(out_file, 'wb') as out:
        out.write(response.content)

    log.log('Download complete.')

# End download_file()


def file_list() -> dict:

    return {
        "ipv4loc": {
            "descr": 'IPv4 IP location',
            "url": (
                'https://www.ip2location.com/download/?' +
                'token=ufRJhEfOZShnqF04UinZPGIltN6XRoFmTlVMWoVeAn' +
                '7aGteAcijO9Dz4Rg6laAYv&file=DB11LITECSV'
            ),
            "zip_file": 'IP2LOCATION-LITE-DB11.CSV.ZIP',
            "zip_path":
                os.path.join(opts.tmp_dir, 'IP2LOCATION-LITE-DB11.CSV.ZIP'),
            "csv_file": 'IP2LOCATION-LITE-DB11.CSV',
            "csv_path":
                os.path.join(opts.tmp_dir, 'IP2LOCATION-LITE-DB11.CSV'),
            "table_name": 'ip2location_db11',
            "columns": [
                'ip_from',
                'ip_to',
                'country_code',
                'country_name',
                'region_name',
                'city_name',
                'latitude',
                'longitude',
                'zip_code',
                'time_zone'
            ]
        }

        # "ipv6loc": {
        #     "descr": 'IPv6 IP location',
        #     "url": (
        #         'https://www.ip2location.com/download/?' +
        #         'token=ufRJhEfOZShnqF04UinZPGIltN6XRoFmTlVMWoVeAn' +
        #         '7aGteAcijO9Dz4Rg6laAYv&file=DB11LITECSVIPV6'
        #     ),
        #     "zip_file": 'IP2LOCATION-LITE-DB11.IPV6.CSV.ZIP',
        #     "zip_path": os.path.join(
        #         opts.tmp_dir, 'IP2LOCATION-LITE-DB11.IPV6.CSV.ZIP'
        #     ),
        #     "csv_file": 'IP2LOCATION-LITE-DB11.IPV6.CSV',
        #     "csv_path":
        #         os.path.join(opts.tmp_dir, 'IP2LOCATION-LITE-DB11.IPV6.CSV'),
        #     "table_name": 'ip2location_db11_ipv6',
        #     "columns": [
        #         'ip_from',
        #         'ip_to',
        #         'country_code',
        #         'country_name',
        #         'region_name',
        #         'city_name',
        #         'latitude',
        #         'longitude',
        #         'zip_code',
        #         'time_zone'
        #     ]
        # }
    }

# End file_list()


def update_db(
    db: clintosaurous.db.connect, table_name: str, columns: list, data: list
) -> None:

    # Type hints.
    if not isinstance(db, clintosaurous.db.connect):
        raise TypeError(
            f'db expected `clintosaurous.db.connect`, received {type(db)}')
    if not isinstance(table_name, str):
        raise TypeError(
            f'table_name expected `str`, received {type(table_name)}')
    if not isinstance(columns, list):
        raise TypeError(f'columns expected `list`, received {type(columns)}')
    if not isinstance(data, list):
        raise TypeError(f'data expected `list`, received {type(data)}')

    log.log(f'Truncating {table_name}')
    db.cursor().execute(f'truncate {table_name}')

    log.log(f'Inserting {len(data):,} rows into {table_name}')

    insert_start = time.time()

    sql = f'insert into {table_name}\n'
    sql += '    (' + ', '.join(columns) + ')\n'
    sql += 'values\n'
    values = []
    for i in range(len(columns)):
        values.append("%s")
    sql += '    (' + ', '.join(values) + ')'
    log.dbg(f'update_db(): {table_name}: sql:\n{sql}')

    commit_interval = 5000
    while data:
        db.cursor().executemany(sql, data[0:commit_interval])
        db.commit()
        del data[0:commit_interval]

    insert_time = time.time() - insert_start
    log.log(f'Insertion time: {run_time(insert_time)}')

# End update_db()


if __name__ == '__main__':
    opts = cli_opts()

    log.log('Connecting to IP2LOCATION database')
    user, passwd = credentials.data().get('mysql-iploc_rw')
    db = clintosaurous.db.connect(
        host='mysql1.clintosaurous.com',
        user=user,
        passwd=passwd,
        database='ip2location',
        logging=True
    )

    files = file_list()
    for file_name in sorted(files.keys()):
        file = files[file_name]
        log.log(f'Processing {file["descr"]}')

        download_file(file["url"], file["zip_file"])

        log.log(f'Extracting {file["csv_path"]} from {file["zip_path"]}')
        with ZipFile(file["zip_path"]) as z:
            z.extract(file["csv_file"], path=opts.tmp_dir)

        log.log(f'Reading in {file["csv_file"]}')
        data = []
        with open(file["csv_path"], newline='') as c:
            reader = csv.reader(c)
            for row in reader:
                data.append(row)
        log.log(f'{len(data):,} rows read')

        update_db(db, file["table_name"], file["columns"], data)

        if not opts.no_del:
            log.log(f'Deleting {file["csv_file"]}')
            os.remove(file["csv_path"])
            log.log(f'Deleting {file["zip_file"]}')
            os.remove(file["zip_path"])

    log.log('Disconnecting from the database')
    db.close()

    log.log(f'Run time: {run_time()}')
